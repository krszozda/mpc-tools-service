# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import mpc_tools_pb2 as mpc__tools__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in mpc_tools_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MPCToolsServiceStub(object):
    """MPC Tools Service - Advanced Multi-Party Computation Tools for AI Agents
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SecureAggregation = channel.unary_unary(
                '/mpc_tools.MPCToolsService/SecureAggregation',
                request_serializer=mpc__tools__pb2.SecureAggregationRequest.SerializeToString,
                response_deserializer=mpc__tools__pb2.SecureAggregationResponse.FromString,
                _registered_method=True)
        self.FederatedLearning = channel.unary_unary(
                '/mpc_tools.MPCToolsService/FederatedLearning',
                request_serializer=mpc__tools__pb2.FederatedLearningRequest.SerializeToString,
                response_deserializer=mpc__tools__pb2.FederatedLearningResponse.FromString,
                _registered_method=True)
        self.SecureSum = channel.unary_unary(
                '/mpc_tools.MPCToolsService/SecureSum',
                request_serializer=mpc__tools__pb2.SecureSumRequest.SerializeToString,
                response_deserializer=mpc__tools__pb2.SecureSumResponse.FromString,
                _registered_method=True)
        self.SecureMean = channel.unary_unary(
                '/mpc_tools.MPCToolsService/SecureMean',
                request_serializer=mpc__tools__pb2.SecureMeanRequest.SerializeToString,
                response_deserializer=mpc__tools__pb2.SecureMeanResponse.FromString,
                _registered_method=True)
        self.DifferentialPrivacyQuery = channel.unary_unary(
                '/mpc_tools.MPCToolsService/DifferentialPrivacyQuery',
                request_serializer=mpc__tools__pb2.DPQueryRequest.SerializeToString,
                response_deserializer=mpc__tools__pb2.DPQueryResponse.FromString,
                _registered_method=True)
        self.HomomorphicComputation = channel.unary_unary(
                '/mpc_tools.MPCToolsService/HomomorphicComputation',
                request_serializer=mpc__tools__pb2.HomomorphicRequest.SerializeToString,
                response_deserializer=mpc__tools__pb2.HomomorphicResponse.FromString,
                _registered_method=True)
        self.ZeroKnowledgeProof = channel.unary_unary(
                '/mpc_tools.MPCToolsService/ZeroKnowledgeProof',
                request_serializer=mpc__tools__pb2.ZKProofRequest.SerializeToString,
                response_deserializer=mpc__tools__pb2.ZKProofResponse.FromString,
                _registered_method=True)
        self.PrivateSetIntersection = channel.unary_unary(
                '/mpc_tools.MPCToolsService/PrivateSetIntersection',
                request_serializer=mpc__tools__pb2.PSIRequest.SerializeToString,
                response_deserializer=mpc__tools__pb2.PSIResponse.FromString,
                _registered_method=True)
        self.CoordinateAgents = channel.unary_unary(
                '/mpc_tools.MPCToolsService/CoordinateAgents',
                request_serializer=mpc__tools__pb2.CoordinationRequest.SerializeToString,
                response_deserializer=mpc__tools__pb2.CoordinationResponse.FromString,
                _registered_method=True)
        self.ShareInsights = channel.unary_unary(
                '/mpc_tools.MPCToolsService/ShareInsights',
                request_serializer=mpc__tools__pb2.InsightShareRequest.SerializeToString,
                response_deserializer=mpc__tools__pb2.InsightShareResponse.FromString,
                _registered_method=True)
        self.ConsensusProtocol = channel.unary_unary(
                '/mpc_tools.MPCToolsService/ConsensusProtocol',
                request_serializer=mpc__tools__pb2.ConsensusRequest.SerializeToString,
                response_deserializer=mpc__tools__pb2.ConsensusResponse.FromString,
                _registered_method=True)
        self.AgentSynchronization = channel.unary_unary(
                '/mpc_tools.MPCToolsService/AgentSynchronization',
                request_serializer=mpc__tools__pb2.SyncRequest.SerializeToString,
                response_deserializer=mpc__tools__pb2.SyncResponse.FromString,
                _registered_method=True)
        self.AdvancedRiskModeling = channel.unary_unary(
                '/mpc_tools.MPCToolsService/AdvancedRiskModeling',
                request_serializer=mpc__tools__pb2.RiskModelRequest.SerializeToString,
                response_deserializer=mpc__tools__pb2.RiskModelResponse.FromString,
                _registered_method=True)
        self.PortfolioOptimization = channel.unary_unary(
                '/mpc_tools.MPCToolsService/PortfolioOptimization',
                request_serializer=mpc__tools__pb2.PortfolioOptRequest.SerializeToString,
                response_deserializer=mpc__tools__pb2.PortfolioOptResponse.FromString,
                _registered_method=True)
        self.CorrelationAnalysis = channel.unary_unary(
                '/mpc_tools.MPCToolsService/CorrelationAnalysis',
                request_serializer=mpc__tools__pb2.CorrelationRequest.SerializeToString,
                response_deserializer=mpc__tools__pb2.CorrelationResponse.FromString,
                _registered_method=True)
        self.AnomalyDetection = channel.unary_unary(
                '/mpc_tools.MPCToolsService/AnomalyDetection',
                request_serializer=mpc__tools__pb2.AnomalyRequest.SerializeToString,
                response_deserializer=mpc__tools__pb2.AnomalyResponse.FromString,
                _registered_method=True)
        self.OrchestrateComputation = channel.unary_stream(
                '/mpc_tools.MPCToolsService/OrchestrateComputation',
                request_serializer=mpc__tools__pb2.OrchestrationRequest.SerializeToString,
                response_deserializer=mpc__tools__pb2.ComputationResult.FromString,
                _registered_method=True)
        self.StreamSecureComputation = channel.stream_stream(
                '/mpc_tools.MPCToolsService/StreamSecureComputation',
                request_serializer=mpc__tools__pb2.SecureComputationChunk.SerializeToString,
                response_deserializer=mpc__tools__pb2.ComputationResult.FromString,
                _registered_method=True)
        self.GetServiceStatus = channel.unary_unary(
                '/mpc_tools.MPCToolsService/GetServiceStatus',
                request_serializer=mpc__tools__pb2.StatusRequest.SerializeToString,
                response_deserializer=mpc__tools__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/mpc_tools.MPCToolsService/HealthCheck',
                request_serializer=mpc__tools__pb2.HealthRequest.SerializeToString,
                response_deserializer=mpc__tools__pb2.HealthResponse.FromString,
                _registered_method=True)


class MPCToolsServiceServicer(object):
    """MPC Tools Service - Advanced Multi-Party Computation Tools for AI Agents
    """

    def SecureAggregation(self, request, context):
        """Secure Multi-Party Computations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FederatedLearning(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SecureSum(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SecureMean(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DifferentialPrivacyQuery(self, request, context):
        """Privacy-Preserving Operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HomomorphicComputation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ZeroKnowledgeProof(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PrivateSetIntersection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CoordinateAgents(self, request, context):
        """Multi-Agent Coordination
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ShareInsights(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConsensusProtocol(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AgentSynchronization(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AdvancedRiskModeling(self, request, context):
        """Advanced Analytics & Risk Modeling
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PortfolioOptimization(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CorrelationAnalysis(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnomalyDetection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OrchestrateComputation(self, request, context):
        """Real-time Orchestration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamSecureComputation(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetServiceStatus(self, request, context):
        """Service Management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MPCToolsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SecureAggregation': grpc.unary_unary_rpc_method_handler(
                    servicer.SecureAggregation,
                    request_deserializer=mpc__tools__pb2.SecureAggregationRequest.FromString,
                    response_serializer=mpc__tools__pb2.SecureAggregationResponse.SerializeToString,
            ),
            'FederatedLearning': grpc.unary_unary_rpc_method_handler(
                    servicer.FederatedLearning,
                    request_deserializer=mpc__tools__pb2.FederatedLearningRequest.FromString,
                    response_serializer=mpc__tools__pb2.FederatedLearningResponse.SerializeToString,
            ),
            'SecureSum': grpc.unary_unary_rpc_method_handler(
                    servicer.SecureSum,
                    request_deserializer=mpc__tools__pb2.SecureSumRequest.FromString,
                    response_serializer=mpc__tools__pb2.SecureSumResponse.SerializeToString,
            ),
            'SecureMean': grpc.unary_unary_rpc_method_handler(
                    servicer.SecureMean,
                    request_deserializer=mpc__tools__pb2.SecureMeanRequest.FromString,
                    response_serializer=mpc__tools__pb2.SecureMeanResponse.SerializeToString,
            ),
            'DifferentialPrivacyQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.DifferentialPrivacyQuery,
                    request_deserializer=mpc__tools__pb2.DPQueryRequest.FromString,
                    response_serializer=mpc__tools__pb2.DPQueryResponse.SerializeToString,
            ),
            'HomomorphicComputation': grpc.unary_unary_rpc_method_handler(
                    servicer.HomomorphicComputation,
                    request_deserializer=mpc__tools__pb2.HomomorphicRequest.FromString,
                    response_serializer=mpc__tools__pb2.HomomorphicResponse.SerializeToString,
            ),
            'ZeroKnowledgeProof': grpc.unary_unary_rpc_method_handler(
                    servicer.ZeroKnowledgeProof,
                    request_deserializer=mpc__tools__pb2.ZKProofRequest.FromString,
                    response_serializer=mpc__tools__pb2.ZKProofResponse.SerializeToString,
            ),
            'PrivateSetIntersection': grpc.unary_unary_rpc_method_handler(
                    servicer.PrivateSetIntersection,
                    request_deserializer=mpc__tools__pb2.PSIRequest.FromString,
                    response_serializer=mpc__tools__pb2.PSIResponse.SerializeToString,
            ),
            'CoordinateAgents': grpc.unary_unary_rpc_method_handler(
                    servicer.CoordinateAgents,
                    request_deserializer=mpc__tools__pb2.CoordinationRequest.FromString,
                    response_serializer=mpc__tools__pb2.CoordinationResponse.SerializeToString,
            ),
            'ShareInsights': grpc.unary_unary_rpc_method_handler(
                    servicer.ShareInsights,
                    request_deserializer=mpc__tools__pb2.InsightShareRequest.FromString,
                    response_serializer=mpc__tools__pb2.InsightShareResponse.SerializeToString,
            ),
            'ConsensusProtocol': grpc.unary_unary_rpc_method_handler(
                    servicer.ConsensusProtocol,
                    request_deserializer=mpc__tools__pb2.ConsensusRequest.FromString,
                    response_serializer=mpc__tools__pb2.ConsensusResponse.SerializeToString,
            ),
            'AgentSynchronization': grpc.unary_unary_rpc_method_handler(
                    servicer.AgentSynchronization,
                    request_deserializer=mpc__tools__pb2.SyncRequest.FromString,
                    response_serializer=mpc__tools__pb2.SyncResponse.SerializeToString,
            ),
            'AdvancedRiskModeling': grpc.unary_unary_rpc_method_handler(
                    servicer.AdvancedRiskModeling,
                    request_deserializer=mpc__tools__pb2.RiskModelRequest.FromString,
                    response_serializer=mpc__tools__pb2.RiskModelResponse.SerializeToString,
            ),
            'PortfolioOptimization': grpc.unary_unary_rpc_method_handler(
                    servicer.PortfolioOptimization,
                    request_deserializer=mpc__tools__pb2.PortfolioOptRequest.FromString,
                    response_serializer=mpc__tools__pb2.PortfolioOptResponse.SerializeToString,
            ),
            'CorrelationAnalysis': grpc.unary_unary_rpc_method_handler(
                    servicer.CorrelationAnalysis,
                    request_deserializer=mpc__tools__pb2.CorrelationRequest.FromString,
                    response_serializer=mpc__tools__pb2.CorrelationResponse.SerializeToString,
            ),
            'AnomalyDetection': grpc.unary_unary_rpc_method_handler(
                    servicer.AnomalyDetection,
                    request_deserializer=mpc__tools__pb2.AnomalyRequest.FromString,
                    response_serializer=mpc__tools__pb2.AnomalyResponse.SerializeToString,
            ),
            'OrchestrateComputation': grpc.unary_stream_rpc_method_handler(
                    servicer.OrchestrateComputation,
                    request_deserializer=mpc__tools__pb2.OrchestrationRequest.FromString,
                    response_serializer=mpc__tools__pb2.ComputationResult.SerializeToString,
            ),
            'StreamSecureComputation': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamSecureComputation,
                    request_deserializer=mpc__tools__pb2.SecureComputationChunk.FromString,
                    response_serializer=mpc__tools__pb2.ComputationResult.SerializeToString,
            ),
            'GetServiceStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServiceStatus,
                    request_deserializer=mpc__tools__pb2.StatusRequest.FromString,
                    response_serializer=mpc__tools__pb2.StatusResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=mpc__tools__pb2.HealthRequest.FromString,
                    response_serializer=mpc__tools__pb2.HealthResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mpc_tools.MPCToolsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('mpc_tools.MPCToolsService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MPCToolsService(object):
    """MPC Tools Service - Advanced Multi-Party Computation Tools for AI Agents
    """

    @staticmethod
    def SecureAggregation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mpc_tools.MPCToolsService/SecureAggregation',
            mpc__tools__pb2.SecureAggregationRequest.SerializeToString,
            mpc__tools__pb2.SecureAggregationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FederatedLearning(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mpc_tools.MPCToolsService/FederatedLearning',
            mpc__tools__pb2.FederatedLearningRequest.SerializeToString,
            mpc__tools__pb2.FederatedLearningResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SecureSum(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mpc_tools.MPCToolsService/SecureSum',
            mpc__tools__pb2.SecureSumRequest.SerializeToString,
            mpc__tools__pb2.SecureSumResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SecureMean(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mpc_tools.MPCToolsService/SecureMean',
            mpc__tools__pb2.SecureMeanRequest.SerializeToString,
            mpc__tools__pb2.SecureMeanResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DifferentialPrivacyQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mpc_tools.MPCToolsService/DifferentialPrivacyQuery',
            mpc__tools__pb2.DPQueryRequest.SerializeToString,
            mpc__tools__pb2.DPQueryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HomomorphicComputation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mpc_tools.MPCToolsService/HomomorphicComputation',
            mpc__tools__pb2.HomomorphicRequest.SerializeToString,
            mpc__tools__pb2.HomomorphicResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ZeroKnowledgeProof(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mpc_tools.MPCToolsService/ZeroKnowledgeProof',
            mpc__tools__pb2.ZKProofRequest.SerializeToString,
            mpc__tools__pb2.ZKProofResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PrivateSetIntersection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mpc_tools.MPCToolsService/PrivateSetIntersection',
            mpc__tools__pb2.PSIRequest.SerializeToString,
            mpc__tools__pb2.PSIResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CoordinateAgents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mpc_tools.MPCToolsService/CoordinateAgents',
            mpc__tools__pb2.CoordinationRequest.SerializeToString,
            mpc__tools__pb2.CoordinationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ShareInsights(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mpc_tools.MPCToolsService/ShareInsights',
            mpc__tools__pb2.InsightShareRequest.SerializeToString,
            mpc__tools__pb2.InsightShareResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConsensusProtocol(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mpc_tools.MPCToolsService/ConsensusProtocol',
            mpc__tools__pb2.ConsensusRequest.SerializeToString,
            mpc__tools__pb2.ConsensusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AgentSynchronization(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mpc_tools.MPCToolsService/AgentSynchronization',
            mpc__tools__pb2.SyncRequest.SerializeToString,
            mpc__tools__pb2.SyncResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AdvancedRiskModeling(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mpc_tools.MPCToolsService/AdvancedRiskModeling',
            mpc__tools__pb2.RiskModelRequest.SerializeToString,
            mpc__tools__pb2.RiskModelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PortfolioOptimization(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mpc_tools.MPCToolsService/PortfolioOptimization',
            mpc__tools__pb2.PortfolioOptRequest.SerializeToString,
            mpc__tools__pb2.PortfolioOptResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CorrelationAnalysis(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mpc_tools.MPCToolsService/CorrelationAnalysis',
            mpc__tools__pb2.CorrelationRequest.SerializeToString,
            mpc__tools__pb2.CorrelationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AnomalyDetection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mpc_tools.MPCToolsService/AnomalyDetection',
            mpc__tools__pb2.AnomalyRequest.SerializeToString,
            mpc__tools__pb2.AnomalyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def OrchestrateComputation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/mpc_tools.MPCToolsService/OrchestrateComputation',
            mpc__tools__pb2.OrchestrationRequest.SerializeToString,
            mpc__tools__pb2.ComputationResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamSecureComputation(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/mpc_tools.MPCToolsService/StreamSecureComputation',
            mpc__tools__pb2.SecureComputationChunk.SerializeToString,
            mpc__tools__pb2.ComputationResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetServiceStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mpc_tools.MPCToolsService/GetServiceStatus',
            mpc__tools__pb2.StatusRequest.SerializeToString,
            mpc__tools__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mpc_tools.MPCToolsService/HealthCheck',
            mpc__tools__pb2.HealthRequest.SerializeToString,
            mpc__tools__pb2.HealthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
